#include <cstdint>
#include <cstdio>
#include <cstring>
#include <array>

/*
 * VITAUT_2 is based on vitaut's algorithm with three small changes.
 * The first change is that it copies character pairs in the main loop, 
 * reducing the number of store instructions. Similar to INGE_2, 
 * VITAUT_2 copies both final characters and uses pointer arithmetic
 * to return a pointer to the string.
 * VITAUT_2 copies three characters at a time first
 *
 * based on:
 * https://stackoverflow.com/questions/7890194/optimized-itoa-function/32818030
 */

static constexpr std::array<std::uint32_t, 1000> str1000p {
	0x303030, 0x313030, 0x323030, 0x333030, 0x343030, 0x353030, 0x363030, 0x373030, 0x383030, 0x393030,
	0x303130, 0x313130, 0x323130, 0x333130, 0x343130, 0x353130, 0x363130, 0x373130, 0x383130, 0x393130,
	0x303230, 0x313230, 0x323230, 0x333230, 0x343230, 0x353230, 0x363230, 0x373230, 0x383230, 0x393230,
	0x303330, 0x313330, 0x323330, 0x333330, 0x343330, 0x353330, 0x363330, 0x373330, 0x383330, 0x393330,
	0x303430, 0x313430, 0x323430, 0x333430, 0x343430, 0x353430, 0x363430, 0x373430, 0x383430, 0x393430,
	0x303530, 0x313530, 0x323530, 0x333530, 0x343530, 0x353530, 0x363530, 0x373530, 0x383530, 0x393530,
	0x303630, 0x313630, 0x323630, 0x333630, 0x343630, 0x353630, 0x363630, 0x373630, 0x383630, 0x393630,
	0x303730, 0x313730, 0x323730, 0x333730, 0x343730, 0x353730, 0x363730, 0x373730, 0x383730, 0x393730,
	0x303830, 0x313830, 0x323830, 0x333830, 0x343830, 0x353830, 0x363830, 0x373830, 0x383830, 0x393830,
	0x303930, 0x313930, 0x323930, 0x333930, 0x343930, 0x353930, 0x363930, 0x373930, 0x383930, 0x393930,

	0x303031, 0x313031, 0x323031, 0x333031, 0x343031, 0x353031, 0x363031, 0x373031, 0x383031, 0x393031,
	0x303131, 0x313131, 0x323131, 0x333131, 0x343131, 0x353131, 0x363131, 0x373131, 0x383131, 0x393131,
	0x303231, 0x313231, 0x323231, 0x333231, 0x343231, 0x353231, 0x363231, 0x373231, 0x383231, 0x393231,
	0x303331, 0x313331, 0x323331, 0x333331, 0x343331, 0x353331, 0x363331, 0x373331, 0x383331, 0x393331,
	0x303431, 0x313431, 0x323431, 0x333431, 0x343431, 0x353431, 0x363431, 0x373431, 0x383431, 0x393431,
	0x303531, 0x313531, 0x323531, 0x333531, 0x343531, 0x353531, 0x363531, 0x373531, 0x383531, 0x393531,
	0x303631, 0x313631, 0x323631, 0x333631, 0x343631, 0x353631, 0x363631, 0x373631, 0x383631, 0x393631,
	0x303731, 0x313731, 0x323731, 0x333731, 0x343731, 0x353731, 0x363731, 0x373731, 0x383731, 0x393731,
	0x303831, 0x313831, 0x323831, 0x333831, 0x343831, 0x353831, 0x363831, 0x373831, 0x383831, 0x393831,
	0x303931, 0x313931, 0x323931, 0x333931, 0x343931, 0x353931, 0x363931, 0x373931, 0x383931, 0x393931,

	0x303032, 0x313032, 0x323032, 0x333032, 0x343032, 0x353032, 0x363032, 0x373032, 0x383032, 0x393032,
	0x303132, 0x313132, 0x323132, 0x333132, 0x343132, 0x353132, 0x363132, 0x373132, 0x383132, 0x393132,
	0x303232, 0x313232, 0x323232, 0x333232, 0x343232, 0x353232, 0x363232, 0x373232, 0x383232, 0x393232,
	0x303332, 0x313332, 0x323332, 0x333332, 0x343332, 0x353332, 0x363332, 0x373332, 0x383332, 0x393332,
	0x303432, 0x313432, 0x323432, 0x333432, 0x343432, 0x353432, 0x363432, 0x373432, 0x383432, 0x393432,
	0x303532, 0x313532, 0x323532, 0x333532, 0x343532, 0x353532, 0x363532, 0x373532, 0x383532, 0x393532,
	0x303632, 0x313632, 0x323632, 0x333632, 0x343632, 0x353632, 0x363632, 0x373632, 0x383632, 0x393632,
	0x303732, 0x313732, 0x323732, 0x333732, 0x343732, 0x353732, 0x363732, 0x373732, 0x383732, 0x393732,
	0x303832, 0x313832, 0x323832, 0x333832, 0x343832, 0x353832, 0x363832, 0x373832, 0x383832, 0x393832,
	0x303932, 0x313932, 0x323932, 0x333932, 0x343932, 0x353932, 0x363932, 0x373932, 0x383932, 0x393932,

	0x303033, 0x313033, 0x323033, 0x333033, 0x343033, 0x353033, 0x363033, 0x373033, 0x383033, 0x393033,
	0x303133, 0x313133, 0x323133, 0x333133, 0x343133, 0x353133, 0x363133, 0x373133, 0x383133, 0x393133,
	0x303233, 0x313233, 0x323233, 0x333233, 0x343233, 0x353233, 0x363233, 0x373233, 0x383233, 0x393233,
	0x303333, 0x313333, 0x323333, 0x333333, 0x343333, 0x353333, 0x363333, 0x373333, 0x383333, 0x393333,
	0x303433, 0x313433, 0x323433, 0x333433, 0x343433, 0x353433, 0x363433, 0x373433, 0x383433, 0x393433,
	0x303533, 0x313533, 0x323533, 0x333533, 0x343533, 0x353533, 0x363533, 0x373533, 0x383533, 0x393533,
	0x303633, 0x313633, 0x323633, 0x333633, 0x343633, 0x353633, 0x363633, 0x373633, 0x383633, 0x393633,
	0x303733, 0x313733, 0x323733, 0x333733, 0x343733, 0x353733, 0x363733, 0x373733, 0x383733, 0x393733,
	0x303833, 0x313833, 0x323833, 0x333833, 0x343833, 0x353833, 0x363833, 0x373833, 0x383833, 0x393833,
	0x303933, 0x313933, 0x323933, 0x333933, 0x343933, 0x353933, 0x363933, 0x373933, 0x383933, 0x393933,

	0x303034, 0x313034, 0x323034, 0x333034, 0x343034, 0x353034, 0x363034, 0x373034, 0x383034, 0x393034,
	0x303134, 0x313134, 0x323134, 0x333134, 0x343134, 0x353134, 0x363134, 0x373134, 0x383134, 0x393134,
	0x303234, 0x313234, 0x323234, 0x333234, 0x343234, 0x353234, 0x363234, 0x373234, 0x383234, 0x393234,
	0x303334, 0x313334, 0x323334, 0x333334, 0x343334, 0x353334, 0x363334, 0x373334, 0x383334, 0x393334,
	0x303434, 0x313434, 0x323434, 0x333434, 0x343434, 0x353434, 0x363434, 0x373434, 0x383434, 0x393434,
	0x303534, 0x313534, 0x323534, 0x333534, 0x343534, 0x353534, 0x363534, 0x373534, 0x383534, 0x393534,
	0x303634, 0x313634, 0x323634, 0x333634, 0x343634, 0x353634, 0x363634, 0x373634, 0x383634, 0x393634,
	0x303734, 0x313734, 0x323734, 0x333734, 0x343734, 0x353734, 0x363734, 0x373734, 0x383734, 0x393734,
	0x303834, 0x313834, 0x323834, 0x333834, 0x343834, 0x353834, 0x363834, 0x373834, 0x383834, 0x393834,
	0x303934, 0x313934, 0x323934, 0x333934, 0x343934, 0x353934, 0x363934, 0x373934, 0x383934, 0x393934,

	0x303035, 0x313035, 0x323035, 0x333035, 0x343035, 0x353035, 0x363035, 0x373035, 0x383035, 0x393035,
	0x303135, 0x313135, 0x323135, 0x333135, 0x343135, 0x353135, 0x363135, 0x373135, 0x383135, 0x393135,
	0x303235, 0x313235, 0x323235, 0x333235, 0x343235, 0x353235, 0x363235, 0x373235, 0x383235, 0x393235,
	0x303335, 0x313335, 0x323335, 0x333335, 0x343335, 0x353335, 0x363335, 0x373335, 0x383335, 0x393335,
	0x303435, 0x313435, 0x323435, 0x333435, 0x343435, 0x353435, 0x363435, 0x373435, 0x383435, 0x393435,
	0x303535, 0x313535, 0x323535, 0x333535, 0x343535, 0x353535, 0x363535, 0x373535, 0x383535, 0x393535,
	0x303635, 0x313635, 0x323635, 0x333635, 0x343635, 0x353635, 0x363635, 0x373635, 0x383635, 0x393635,
	0x303735, 0x313735, 0x323735, 0x333735, 0x343735, 0x353735, 0x363735, 0x373735, 0x383735, 0x393735,
	0x303835, 0x313835, 0x323835, 0x333835, 0x343835, 0x353835, 0x363835, 0x373835, 0x383835, 0x393835,
	0x303935, 0x313935, 0x323935, 0x333935, 0x343935, 0x353935, 0x363935, 0x373935, 0x383935, 0x393935,

	0x303036, 0x313036, 0x323036, 0x333036, 0x343036, 0x353036, 0x363036, 0x373036, 0x383036, 0x393036,
	0x303136, 0x313136, 0x323136, 0x333136, 0x343136, 0x353136, 0x363136, 0x373136, 0x383136, 0x393136,
	0x303236, 0x313236, 0x323236, 0x333236, 0x343236, 0x353236, 0x363236, 0x373236, 0x383236, 0x393236,
	0x303336, 0x313336, 0x323336, 0x333336, 0x343336, 0x353336, 0x363336, 0x373336, 0x383336, 0x393336,
	0x303436, 0x313436, 0x323436, 0x333436, 0x343436, 0x353436, 0x363436, 0x373436, 0x383436, 0x393436,
	0x303536, 0x313536, 0x323536, 0x333536, 0x343536, 0x353536, 0x363536, 0x373536, 0x383536, 0x393536,
	0x303636, 0x313636, 0x323636, 0x333636, 0x343636, 0x353636, 0x363636, 0x373636, 0x383636, 0x393636,
	0x303736, 0x313736, 0x323736, 0x333736, 0x343736, 0x353736, 0x363736, 0x373736, 0x383736, 0x393736,
	0x303836, 0x313836, 0x323836, 0x333836, 0x343836, 0x353836, 0x363836, 0x373836, 0x383836, 0x393836,
	0x303936, 0x313936, 0x323936, 0x333936, 0x343936, 0x353936, 0x363936, 0x373936, 0x383936, 0x393936,

	0x303037, 0x313037, 0x323037, 0x333037, 0x343037, 0x353037, 0x363037, 0x373037, 0x383037, 0x393037,
	0x303137, 0x313137, 0x323137, 0x333137, 0x343137, 0x353137, 0x363137, 0x373137, 0x383137, 0x393137,
	0x303237, 0x313237, 0x323237, 0x333237, 0x343237, 0x353237, 0x363237, 0x373237, 0x383237, 0x393237,
	0x303337, 0x313337, 0x323337, 0x333337, 0x343337, 0x353337, 0x363337, 0x373337, 0x383337, 0x393337,
	0x303437, 0x313437, 0x323437, 0x333437, 0x343437, 0x353437, 0x363437, 0x373437, 0x383437, 0x393437,
	0x303537, 0x313537, 0x323537, 0x333537, 0x343537, 0x353537, 0x363537, 0x373537, 0x383537, 0x393537,
	0x303637, 0x313637, 0x323637, 0x333637, 0x343637, 0x353637, 0x363637, 0x373637, 0x383637, 0x393637,
	0x303737, 0x313737, 0x323737, 0x333737, 0x343737, 0x353737, 0x363737, 0x373737, 0x383737, 0x393737,
	0x303837, 0x313837, 0x323837, 0x333837, 0x343837, 0x353837, 0x363837, 0x373837, 0x383837, 0x393837,
	0x303937, 0x313937, 0x323937, 0x333937, 0x343937, 0x353937, 0x363937, 0x373937, 0x383937, 0x393937,

	0x303038, 0x313038, 0x323038, 0x333038, 0x343038, 0x353038, 0x363038, 0x373038, 0x383038, 0x393038,
	0x303138, 0x313138, 0x323138, 0x333138, 0x343138, 0x353138, 0x363138, 0x373138, 0x383138, 0x393138,
	0x303238, 0x313238, 0x323238, 0x333238, 0x343238, 0x353238, 0x363238, 0x373238, 0x383238, 0x393238,
	0x303338, 0x313338, 0x323338, 0x333338, 0x343338, 0x353338, 0x363338, 0x373338, 0x383338, 0x393338,
	0x303438, 0x313438, 0x323438, 0x333438, 0x343438, 0x353438, 0x363438, 0x373438, 0x383438, 0x393438,
	0x303538, 0x313538, 0x323538, 0x333538, 0x343538, 0x353538, 0x363538, 0x373538, 0x383538, 0x393538,
	0x303638, 0x313638, 0x323638, 0x333638, 0x343638, 0x353638, 0x363638, 0x373638, 0x383638, 0x393638,
	0x303738, 0x313738, 0x323738, 0x333738, 0x343738, 0x353738, 0x363738, 0x373738, 0x383738, 0x393738,
	0x303838, 0x313838, 0x323838, 0x333838, 0x343838, 0x353838, 0x363838, 0x373838, 0x383838, 0x393838,
	0x303938, 0x313938, 0x323938, 0x333938, 0x343938, 0x353938, 0x363938, 0x373938, 0x383938, 0x393938,

	0x303039, 0x313039, 0x323039, 0x333039, 0x343039, 0x353039, 0x363039, 0x373039, 0x383039, 0x393039,
	0x303139, 0x313139, 0x323139, 0x333139, 0x343139, 0x353139, 0x363139, 0x373139, 0x383139, 0x393139,
	0x303239, 0x313239, 0x323239, 0x333239, 0x343239, 0x353239, 0x363239, 0x373239, 0x383239, 0x393239,
	0x303339, 0x313339, 0x323339, 0x333339, 0x343339, 0x353339, 0x363339, 0x373339, 0x383339, 0x393339,
	0x303439, 0x313439, 0x323439, 0x333439, 0x343439, 0x353439, 0x363439, 0x373439, 0x383439, 0x393439,
	0x303539, 0x313539, 0x323539, 0x333539, 0x343539, 0x353539, 0x363539, 0x373539, 0x383539, 0x393539,
	0x303639, 0x313639, 0x323639, 0x333639, 0x343639, 0x353639, 0x363639, 0x373639, 0x383639, 0x393639,
	0x303739, 0x313739, 0x323739, 0x333739, 0x343739, 0x353739, 0x363739, 0x373739, 0x383739, 0x393739,
	0x303839, 0x313839, 0x323839, 0x333839, 0x343839, 0x353839, 0x363839, 0x373839, 0x383839, 0x393839,
	0x303939, 0x313939, 0x323939, 0x333939, 0x343939, 0x353939, 0x363939, 0x373939, 0x383939, 0x393939,
};

static constexpr std::array<std::uint16_t, 100> str100p {
    0x3030, 0x3130, 0x3230, 0x3330, 0x3430, 0x3530, 0x3630, 0x3730, 0x3830, 0x3930,
    0x3031, 0x3131, 0x3231, 0x3331, 0x3431, 0x3531, 0x3631, 0x3731, 0x3831, 0x3931,
    0x3032, 0x3132, 0x3232, 0x3332, 0x3432, 0x3532, 0x3632, 0x3732, 0x3832, 0x3932,
    0x3033, 0x3133, 0x3233, 0x3333, 0x3433, 0x3533, 0x3633, 0x3733, 0x3833, 0x3933,
    0x3034, 0x3134, 0x3234, 0x3334, 0x3434, 0x3534, 0x3634, 0x3734, 0x3834, 0x3934,
    0x3035, 0x3135, 0x3235, 0x3335, 0x3435, 0x3535, 0x3635, 0x3735, 0x3835, 0x3935,
    0x3036, 0x3136, 0x3236, 0x3336, 0x3436, 0x3536, 0x3636, 0x3736, 0x3836, 0x3936,
    0x3037, 0x3137, 0x3237, 0x3337, 0x3437, 0x3537, 0x3637, 0x3737, 0x3837, 0x3937,
    0x3038, 0x3138, 0x3238, 0x3338, 0x3438, 0x3538, 0x3638, 0x3738, 0x3838, 0x3938,
    0x3039, 0x3139, 0x3239, 0x3339, 0x3439, 0x3539, 0x3639, 0x3739, 0x3839, 0x3939
};



char * itoa_vitaut_2(char * buf, std::uint32_t val)
{
    char * p { &buf[10] };

    *p = '\n'; // instead of null to remove assignment

    if(val >= 1000) {
        std::uint32_t old { val };

        p -= 3;
        val /= 1000;
        std::memcpy(p, &str1000p[old - (val * 1000)], 3);
    }

    while(val >= 100) {
        std::uint32_t old { val };

        p -= 2;
        val /= 100;
        std::memcpy(p, &str100p[old - (val * 100)], 2);
    }

    p -= 2;
    std::memcpy(p, &str100p[val], 2);

    return &p[val < 10];
}


int main(int argc, char ** argv)
{
    using int_t = std::uint32_t;

    // holds offset then length
    static constexpr std::array<std::uint8_t, 8> fb_buf_off_len {
        0, 9,   // fizzbuzz
        9, 5,   // buzz
        14, 5,  // fizz
        19, 11, // number
    };

    std::array<char, (4096 * 8) - 128> wbuf;

    static std::array<char, 30> fb_buf {
        'F', 'i', 'z', 'z', 'B', 'u', 'z', 'z', '\n', // 9
        'B', 'u', 'z', 'z', '\n',                     // 5
        'F', 'i', 'z', 'z', '\n',                     // 5
        // remaining places are null and will hold number
    };

    int_t m;
    std::uint32_t wbuf_i { 0 };
    std::uint32_t a { 0 };
    std::uint32_t b { 0 };

    for(std::uint32_t i=1; i < 1000001; ++i) {
        ++a;
        ++b;

        a = (a == 3) ? 0 : a;
        b = (b == 5) ? 0 : b;
        m = static_cast<int_t>((a ? 1: 0) + (b ? 2 : 0));

        if(m > 2) {
            char * s { itoa_vitaut_2(fb_buf.data() + fb_buf_off_len[(3 << 1)], i) };
            std::size_t buf_off { 0 };
            while(*(s + ++buf_off) != '\n');
            ++buf_off;

            std::memcpy(
                wbuf.data() + wbuf_i,
                s,
                buf_off
            ); wbuf_i += buf_off;
        } else {
            const std::uint8_t * fb_buf_off_ptr { fb_buf_off_len.data() + (m << 1) };
            std::memcpy(
                wbuf.data() + wbuf_i,
                fb_buf.data() + *(fb_buf_off_ptr),
                *(fb_buf_off_ptr + 1)
            ); wbuf_i += *(fb_buf_off_ptr + 1);
        }

        if(wbuf_i > wbuf.size() - 11) {
            std::fwrite(wbuf.data(), sizeof(char), wbuf_i, stdout);
            wbuf_i = 0;
        }
    }
    
    if(wbuf_i > 0) {
        std::fwrite(wbuf.data(), sizeof(char), wbuf_i, stdout);
        wbuf_i = 0;
    }

    std::fflush(stdout);
    std::fclose(stdout);

    return 0;
}
